#include <LiquidCrystal_I2C.h>
#include <EEPROM.h>
#include <EtherCard.h>
#include <String.h>

#define CONTROL1PIN  2  // System-1 is controlled
#define CONTROL2PIN  3  // System-2 is controlled
#define CONTROL3PIN  4  // LCD on main controller is controlled

static byte mymac[] = { 0x74,0x69,0x69,0x2D,0x30,0x31 };  // Ethernet Module's MAC adress
byte Ethernet::buffer[700]; // Send and receive Buffer
boolean control1state;
boolean control2state;
boolean control3state= 0;

// Images of Buttons, which is used in website
static const unsigned char PROGMEM close[]= {
             0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x0E,
             0x00, 0x00, 0x00, 0x0E, 0x08, 0x04, 0x00, 0x00, 0x00, 0xB5, 0x41, 0xE5, 0x5A, 0x00, 0x00, 0x00, 0x01, 0x73, 0x52, 0x47,
             0x42, 0x00, 0xAE, 0xCE, 0x1C, 0xE9, 0x00, 0x00, 0x00, 0x02, 0x62, 0x4B, 0x47, 0x44, 0x00, 0xFF, 0x87, 0x8F, 0xCC, 0xBF,
             0x00, 0x00, 0x00, 0x09, 0x70, 0x48, 0x59, 0x73, 0x00, 0x00, 0x0B, 0x12, 0x00, 0x00, 0x0B, 0x12, 0x01, 0xD2, 0xDD, 0x7E,
             0xFC, 0x00, 0x00, 0x00, 0x07, 0x74, 0x49, 0x4D, 0x45, 0x07, 0xDC, 0x01, 0x1D, 0x14, 0x21, 0x10, 0xBC, 0x3C, 0xDE, 0x2D,
             0x00, 0x00, 0x00, 0xD2, 0x49, 0x44, 0x41, 0x54, 0x18, 0xD3, 0x75, 0xD0, 0xB1, 0x4A, 0x03, 0x51, 0x10, 0x05, 0xD0, 0xB3,
             0x21, 0x1F, 0x10, 0x04, 0x3B, 0x53, 0x89, 0x5A, 0x09, 0x9B, 0x58, 0xD9, 0x25, 0x5F, 0x60, 0x63, 0x9F, 0x87, 0x5F, 0xE0,
             0x27, 0x6D, 0x7A, 0x5B, 0xC1, 0x6E, 0xF3, 0x01, 0x92, 0x2C, 0x36, 0x56, 0x62, 0x61, 0x23, 0xA4, 0xB1, 0x12, 0xF2, 0x64,
             0xDF, 0x5A, 0xBC, 0x20, 0x5B, 0x98, 0x3B, 0xC5, 0xC0, 0xBD, 0x73, 0xEF, 0x30, 0x53, 0x74, 0x0E, 0x63, 0x48, 0x01, 0xC2,
             0xBD, 0x1B, 0x33, 0xAC, 0x2C, 0xAB, 0x0A, 0x3A, 0x45, 0xA7, 0x10, 0x46, 0xEA, 0x69, 0x39, 0x71, 0x21, 0xD9, 0x78, 0xF5,
             0xD2, 0x98, 0x57, 0x5F, 0x9D, 0x21, 0xA8, 0xEF, 0xCA, 0x53, 0xDF, 0xB6, 0xA2, 0x23, 0xD7, 0xC6, 0xE5, 0x63, 0x6D, 0xC2,
             0x80, 0x10, 0xA6, 0xE5, 0xB9, 0x9D, 0xA4, 0xD5, 0x4A, 0xA2, 0x91, 0xB3, 0x32, 0x04, 0x06, 0x58, 0x5C, 0x89, 0x92, 0x56,
             0xFA, 0xAB, 0x63, 0x16, 0x59, 0x9C, 0x5D, 0xF6, 0xA4, 0xDC, 0x4F, 0x98, 0xC9, 0x3B, 0x33, 0xD5, 0x77, 0x46, 0x64, 0xE7,
             0xAA, 0xE9, 0xD1, 0x79, 0x68, 0xCB, 0x2A, 0x8B, 0xCB, 0x0D, 0xBD, 0xC8, 0x24, 0xF9, 0x60, 0x69, 0x7F, 0xE7, 0xE6, 0xB6,
             0x1C, 0x8B, 0xA2, 0x1F, 0xD1, 0xCE, 0xBB, 0x75, 0x53, 0x4D, 0x3A, 0x03, 0x30, 0x7F, 0x68, 0x9E, 0xBC, 0x29, 0xB4, 0x3E,
             0x3D, 0x5B, 0x37, 0xE6, 0xEC, 0x9D, 0x10, 0x82, 0xC5, 0x3F, 0xEF, 0x3B, 0x8C, 0x5F, 0xC2, 0x84, 0x6A, 0x7B, 0xFB, 0x42,
             0x44, 0xCC, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4E, 0x44, 0xAE, 0x42, 0x60, 0x82
             };
             
static const unsigned char PROGMEM open[]= {
             0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x0E,
             0x00, 0x00, 0x00, 0x0E, 0x04, 0x03, 0x00, 0x00, 0x00, 0xED, 0x66, 0x30, 0xE2, 0x00, 0x00, 0x00, 0x01, 0x73, 0x52, 0x47,
             0x42, 0x00, 0xAE, 0xCE, 0x1C, 0xE9, 0x00, 0x00, 0x00, 0x27, 0x50, 0x4C, 0x54, 0x45, 0x00, 0x00, 0x00, 0xFF, 0xCC, 0x00,
             0xCC, 0x66, 0x00, 0xFF, 0xFF, 0x33, 0xFF, 0x99, 0x00, 0xFF, 0xCC, 0x33, 0xCC, 0x99, 0x66, 0xFF, 0xFF, 0x99, 0xCC, 0x99,
             0x33, 0xCC, 0x99, 0x00, 0xFF, 0xCC, 0x66, 0x99, 0x66, 0x00, 0xFF, 0xCC, 0x99, 0x4A, 0x4E, 0xC9, 0x79, 0x00, 0x00, 0x00,
             0x01, 0x74, 0x52, 0x4E, 0x53, 0x00, 0x40, 0xE6, 0xD8, 0x66, 0x00, 0x00, 0x00, 0x01, 0x62, 0x4B, 0x47, 0x44, 0x00, 0x88,
             0x05, 0x1D, 0x48, 0x00, 0x00, 0x00, 0x09, 0x70, 0x48, 0x59, 0x73, 0x00, 0x00, 0x0B, 0x12, 0x00, 0x00, 0x0B, 0x12, 0x01,
             0xD2, 0xDD, 0x7E, 0xFC, 0x00, 0x00, 0x00, 0x07, 0x74, 0x49, 0x4D, 0x45, 0x07, 0xDC, 0x01, 0x1D, 0x14, 0x23, 0x1C, 0x87,
             0xBC, 0xF0, 0x84, 0x00, 0x00, 0x00, 0x48, 0x49, 0x44, 0x41, 0x54, 0x08, 0xD7, 0x63, 0x60, 0x80, 0x03, 0x26, 0x25, 0x05,
             0x30, 0x95, 0x55, 0x3E, 0x0D, 0xC4, 0xD0, 0x31, 0x16, 0x14, 0x6C, 0x02, 0xD2, 0xC9, 0x86, 0x82, 0x82, 0xD2, 0x40, 0xE1,
             0xC5, 0x40, 0x3A, 0x44, 0x81, 0x81, 0xA9, 0x18, 0x46, 0x0B, 0x0A, 0x8A, 0xBA, 0x00, 0xE9, 0x60, 0x08, 0xCD, 0x90, 0x0C,
             0xA4, 0x9D, 0x80, 0xEA, 0x35, 0x80, 0xD2, 0x20, 0x9A, 0xA9, 0x53, 0xD0, 0x49, 0x01, 0xC9, 0x5C, 0x08, 0x00, 0x00, 0x9A,
             0x56, 0x0B, 0x58, 0x9D, 0x6A, 0x76, 0x99, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4E, 0x44, 0xAE, 0x42, 0x60, 0x82
             };
             

void send_png_image(const char* png_image, unsigned int image_size);
void onLCD();
void LCD_control();

LiquidCrystal_I2C lcd(0x27,16,2);


void setup () {
  
  Serial.begin(9600);
  lcd.begin();  // Initialization of LCD
  lcd.clear();

  if (ether.begin(sizeof Ethernet::buffer, mymac) == 0) // Initialization of Ethernet Module
    Serial.println( "Failed to access Ethernet module");
  ether.dhcpSetup(); // Assignment of IP adress to Module by DHCP
  static byte myip[] = { ether.myip[0],ether.myip[1],ether.myip[2],ether.myip[3] };
  ether.staticSetup(myip);  // The assigned IP is set as static IP.
  
  onLCD();  // IP of module is written on LCD.

  pinMode(CONTROL1PIN, OUTPUT);
  pinMode(CONTROL2PIN, OUTPUT);

  // The last system's states is received from EEPROM and assigned to digital pins.
  control1state = EEPROM.read(0);
  control2state = EEPROM.read(1);  
  digitalWrite(CONTROL1PIN, control1state);
  digitalWrite(CONTROL2PIN, control2state); 
}
  
void loop() {

  // Pocket knowledge is received continually.
  word len = ether.packetReceive();
  word pos = ether.packetLoop(len);

  if(pos) { 
    if(strstr((char *)Ethernet::buffer + pos, "GET /close.png") != 0) 
      send_png_image(close, sizeof(close));
    else if(strstr((char *)Ethernet::buffer + pos, "GET /open.png") != 0)
      send_png_image(open, sizeof(open));
    
    else {
      if(strstr((char *)Ethernet::buffer + pos, "GET /?CONTROL1") != 0) {
        control1state = !control1state;
        EEPROM.write(0,control1state);
        digitalWrite(CONTROL1PIN, control1state);  
      }
      
      if(strstr((char *)Ethernet::buffer + pos, "GET /?CONTROL2") != 0) {
        control2state = !control2state;
        EEPROM.write(1,control2state);
        digitalWrite(CONTROL2PIN, control2state);          
      }
      
       if(strstr((char *)Ethernet::buffer + pos, "GET /?CONTROL3") != 0) {
        control3state = !control3state;
        digitalWrite(CONTROL3PIN, control3state);
      }

      BufferFiller bfill = ether.tcpOffset();
      bfill.emit_p(PSTR("HTTP/1.0 200 OK\r\n"
        "Content-Type: text/html\r\nPragma: no-cache\r\n\r\n"
        "<html><head><title>Arduino Control Webserver</title></head><body>"
        "<div style=\"font-size:50px;background-color:LightGray;border:2px solid Gray;width:60%;margin:auto;text-align: center;\">System Control Application</div>"
        "<br>"
        ));
        
      if(!control1state) bfill.emit_p(PSTR("<div style=\"font-size:40px;\"> System-1: <a href=\"/?CONTROL1\"><img src=\"open.png\" width=\"30\" height=\"30\" ></a></div>"));
      else bfill.emit_p(PSTR("<div style=\"font-size:40px;\"> System-1: <a href=\"/?CONTROL1\"><img src=\"close.png\" width=\"30\" height=\"30\"></a><div>"));
     
      if(!control2state) bfill.emit_p(PSTR("<div style=\"font-size:40px;\"> System-2: <a href=\"/?CONTROL2\"><img src=\"open.png\" width=\"30\" height=\"30\"></a><div>"));
      else bfill.emit_p(PSTR("<div style=\"font-size:40px;\"> System-2: <a href=\"/?CONTROL2\"><img src=\"close.png\" width=\"30\" height=\"30\"></a><div>"));      

      if(!control3state)  bfill.emit_p(PSTR("<div style=\"font-size:40px;\"> LCD on Main: <a href=\"/?CONTROL3\"><img src=\"open.png\" width=\"30\" height=\"30\"></a><div>"));
      else  bfill.emit_p(PSTR("<div style=\"font-size:40px;\"> LCD on Main: <a href=\"/?CONTROL3\"><img src=\"close.png\" width=\"30\" height=\"30\"></a><div>"));  

      bfill.emit_p(PSTR("</body></html>"));
      ether.httpServerReply(bfill.position());
    } 
  }
  
  LCD_control();  // LCD's State is set according to control3state.
}

void send_png_image(const unsigned char* png_image, unsigned int image_size) {
  
  BufferFiller bfill = ether.tcpOffset();
  bfill.emit_p(PSTR("HTTP/1.0 200 OK\r\n"
    "Content-Type: image/png\r\n\r\n"));
  bfill.emit_raw_p((const char*)png_image, image_size);
  ether.httpServerReply(bfill.position());  
}

void onLCD(){
  
  lcd.setCursor(0,0);
  lcd.print("My IP:");
  lcd.setCursor(0,1);   lcd.print(ether.myip[0]);
  for(int i=1;i<4;i++){
    if(ether.myip[i-1]<10){
      lcd.setCursor(4*i-3,1);   lcd.print(".");
      lcd.setCursor((4*i-2),1); lcd.print(ether.myip[i]);
        
    }
    else if(ether.myip[i-1]<100&&ether.myip[i-1]>9){
      lcd.setCursor(4*i-2,1);   lcd.print(".");
      lcd.setCursor((4*i-1),1); lcd.print(ether.myip[i]);
    }
    else{
      lcd.setCursor(4*i-1,1);   lcd.print(".");
      lcd.setCursor(4*i,1);     lcd.print(ether.myip[i]);
    }
  }
}

void LCD_control(){

  if(!control3state){
    lcd.backlight();
    lcd.display();
  }  
  else{
    lcd.noBacklight();
    lcd.noDisplay();
  }
}
